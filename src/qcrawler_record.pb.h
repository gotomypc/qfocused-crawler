// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: qcrawler_record.proto

#ifndef PROTOBUF_qcrawler_5frecord_2eproto__INCLUDED
#define PROTOBUF_qcrawler_5frecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_qcrawler_5frecord_2eproto();
void protobuf_AssignDesc_qcrawler_5frecord_2eproto();
void protobuf_ShutdownFile_qcrawler_5frecord_2eproto();

class QCrawlerUrlMeta;
class QCrawlerUrl;
class QCrawlerRecord;

enum QCrawlerUrl_CrawlType {
  QCrawlerUrl_CrawlType_HOST_RESTRICTED = 0
};
bool QCrawlerUrl_CrawlType_IsValid(int value);
const QCrawlerUrl_CrawlType QCrawlerUrl_CrawlType_CrawlType_MIN = QCrawlerUrl_CrawlType_HOST_RESTRICTED;
const QCrawlerUrl_CrawlType QCrawlerUrl_CrawlType_CrawlType_MAX = QCrawlerUrl_CrawlType_HOST_RESTRICTED;
const int QCrawlerUrl_CrawlType_CrawlType_ARRAYSIZE = QCrawlerUrl_CrawlType_CrawlType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QCrawlerUrl_CrawlType_descriptor();
inline const ::std::string& QCrawlerUrl_CrawlType_Name(QCrawlerUrl_CrawlType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QCrawlerUrl_CrawlType_descriptor(), value);
}
inline bool QCrawlerUrl_CrawlType_Parse(
    const ::std::string& name, QCrawlerUrl_CrawlType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QCrawlerUrl_CrawlType>(
    QCrawlerUrl_CrawlType_descriptor(), name, value);
}
// ===================================================================

class QCrawlerUrlMeta : public ::google::protobuf::Message {
 public:
  QCrawlerUrlMeta();
  virtual ~QCrawlerUrlMeta();
  
  QCrawlerUrlMeta(const QCrawlerUrlMeta& from);
  
  inline QCrawlerUrlMeta& operator=(const QCrawlerUrlMeta& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QCrawlerUrlMeta& default_instance();
  
  void Swap(QCrawlerUrlMeta* other);
  
  // implements Message ----------------------------------------------
  
  QCrawlerUrlMeta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QCrawlerUrlMeta& from);
  void MergeFrom(const QCrawlerUrlMeta& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:QCrawlerUrlMeta)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  friend void  protobuf_AddDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_AssignDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_ShutdownFile_qcrawler_5frecord_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[1];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QCrawlerUrlMeta* default_instance_;
};
// -------------------------------------------------------------------

class QCrawlerUrl : public ::google::protobuf::Message {
 public:
  QCrawlerUrl();
  virtual ~QCrawlerUrl();
  
  QCrawlerUrl(const QCrawlerUrl& from);
  
  inline QCrawlerUrl& operator=(const QCrawlerUrl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QCrawlerUrl& default_instance();
  
  void Swap(QCrawlerUrl* other);
  
  // implements Message ----------------------------------------------
  
  QCrawlerUrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QCrawlerUrl& from);
  void MergeFrom(const QCrawlerUrl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef QCrawlerUrl_CrawlType CrawlType;
  static const CrawlType HOST_RESTRICTED = QCrawlerUrl_CrawlType_HOST_RESTRICTED;
  static inline bool CrawlType_IsValid(int value) {
    return QCrawlerUrl_CrawlType_IsValid(value);
  }
  static const CrawlType CrawlType_MIN =
    QCrawlerUrl_CrawlType_CrawlType_MIN;
  static const CrawlType CrawlType_MAX =
    QCrawlerUrl_CrawlType_CrawlType_MAX;
  static const int CrawlType_ARRAYSIZE =
    QCrawlerUrl_CrawlType_CrawlType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CrawlType_descriptor() {
    return QCrawlerUrl_CrawlType_descriptor();
  }
  static inline const ::std::string& CrawlType_Name(CrawlType value) {
    return QCrawlerUrl_CrawlType_Name(value);
  }
  static inline bool CrawlType_Parse(const ::std::string& name,
      CrawlType* value) {
    return QCrawlerUrl_CrawlType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string url = 1;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 1;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional string normolized_url = 7;
  inline bool has_normolized_url() const;
  inline void clear_normolized_url();
  static const int kNormolizedUrlFieldNumber = 7;
  inline const ::std::string& normolized_url() const;
  inline void set_normolized_url(const ::std::string& value);
  inline void set_normolized_url(const char* value);
  inline void set_normolized_url(const char* value, size_t size);
  inline ::std::string* mutable_normolized_url();
  
  // optional string url_md5 = 2;
  inline bool has_url_md5() const;
  inline void clear_url_md5();
  static const int kUrlMd5FieldNumber = 2;
  inline const ::std::string& url_md5() const;
  inline void set_url_md5(const ::std::string& value);
  inline void set_url_md5(const char* value);
  inline void set_url_md5(const char* value, size_t size);
  inline ::std::string* mutable_url_md5();
  
  // optional string anchor = 3;
  inline bool has_anchor() const;
  inline void clear_anchor();
  static const int kAnchorFieldNumber = 3;
  inline const ::std::string& anchor() const;
  inline void set_anchor(const ::std::string& value);
  inline void set_anchor(const char* value);
  inline void set_anchor(const char* value, size_t size);
  inline ::std::string* mutable_anchor();
  
  // required int32 crawl_level = 4;
  inline bool has_crawl_level() const;
  inline void clear_crawl_level();
  static const int kCrawlLevelFieldNumber = 4;
  inline ::google::protobuf::int32 crawl_level() const;
  inline void set_crawl_level(::google::protobuf::int32 value);
  
  // optional .QCrawlerUrl.CrawlType crawl_type = 5 [default = HOST_RESTRICTED];
  inline bool has_crawl_type() const;
  inline void clear_crawl_type();
  static const int kCrawlTypeFieldNumber = 5;
  inline ::QCrawlerUrl_CrawlType crawl_type() const;
  inline void set_crawl_type(::QCrawlerUrl_CrawlType value);
  
  // optional .QCrawlerUrlMeta mate_data = 6;
  inline bool has_mate_data() const;
  inline void clear_mate_data();
  static const int kMateDataFieldNumber = 6;
  inline const ::QCrawlerUrlMeta& mate_data() const;
  inline ::QCrawlerUrlMeta* mutable_mate_data();
  
  // @@protoc_insertion_point(class_scope:QCrawlerUrl)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* normolized_url_;
  static const ::std::string _default_normolized_url_;
  ::std::string* url_md5_;
  static const ::std::string _default_url_md5_;
  ::std::string* anchor_;
  static const ::std::string _default_anchor_;
  ::google::protobuf::int32 crawl_level_;
  int crawl_type_;
  ::QCrawlerUrlMeta* mate_data_;
  friend void  protobuf_AddDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_AssignDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_ShutdownFile_qcrawler_5frecord_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QCrawlerUrl* default_instance_;
};
// -------------------------------------------------------------------

class QCrawlerRecord : public ::google::protobuf::Message {
 public:
  QCrawlerRecord();
  virtual ~QCrawlerRecord();
  
  QCrawlerRecord(const QCrawlerRecord& from);
  
  inline QCrawlerRecord& operator=(const QCrawlerRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QCrawlerRecord& default_instance();
  
  void Swap(QCrawlerRecord* other);
  
  // implements Message ----------------------------------------------
  
  QCrawlerRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QCrawlerRecord& from);
  void MergeFrom(const QCrawlerRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .QCrawlerUrl crawl_url = 1;
  inline bool has_crawl_url() const;
  inline void clear_crawl_url();
  static const int kCrawlUrlFieldNumber = 1;
  inline const ::QCrawlerUrl& crawl_url() const;
  inline ::QCrawlerUrl* mutable_crawl_url();
  
  // optional string raw_html = 8;
  inline bool has_raw_html() const;
  inline void clear_raw_html();
  static const int kRawHtmlFieldNumber = 8;
  inline const ::std::string& raw_html() const;
  inline void set_raw_html(const ::std::string& value);
  inline void set_raw_html(const char* value);
  inline void set_raw_html(const char* value, size_t size);
  inline ::std::string* mutable_raw_html();
  
  // optional string raw_title = 2;
  inline bool has_raw_title() const;
  inline void clear_raw_title();
  static const int kRawTitleFieldNumber = 2;
  inline const ::std::string& raw_title() const;
  inline void set_raw_title(const ::std::string& value);
  inline void set_raw_title(const char* value);
  inline void set_raw_title(const char* value, size_t size);
  inline ::std::string* mutable_raw_title();
  
  // optional string raw_content = 3;
  inline bool has_raw_content() const;
  inline void clear_raw_content();
  static const int kRawContentFieldNumber = 3;
  inline const ::std::string& raw_content() const;
  inline void set_raw_content(const ::std::string& value);
  inline void set_raw_content(const char* value);
  inline void set_raw_content(const char* value, size_t size);
  inline ::std::string* mutable_raw_content();
  
  // optional string raw_content_md5 = 4;
  inline bool has_raw_content_md5() const;
  inline void clear_raw_content_md5();
  static const int kRawContentMd5FieldNumber = 4;
  inline const ::std::string& raw_content_md5() const;
  inline void set_raw_content_md5(const ::std::string& value);
  inline void set_raw_content_md5(const char* value);
  inline void set_raw_content_md5(const char* value, size_t size);
  inline ::std::string* mutable_raw_content_md5();
  
  // repeated .QCrawlerUrl raw_sub_links = 5;
  inline int raw_sub_links_size() const;
  inline void clear_raw_sub_links();
  static const int kRawSubLinksFieldNumber = 5;
  inline const ::QCrawlerUrl& raw_sub_links(int index) const;
  inline ::QCrawlerUrl* mutable_raw_sub_links(int index);
  inline ::QCrawlerUrl* add_raw_sub_links();
  inline const ::google::protobuf::RepeatedPtrField< ::QCrawlerUrl >&
      raw_sub_links() const;
  inline ::google::protobuf::RepeatedPtrField< ::QCrawlerUrl >*
      mutable_raw_sub_links();
  
  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional string content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  
  // @@protoc_insertion_point(class_scope:QCrawlerRecord)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::QCrawlerUrl* crawl_url_;
  ::std::string* raw_html_;
  static const ::std::string _default_raw_html_;
  ::std::string* raw_title_;
  static const ::std::string _default_raw_title_;
  ::std::string* raw_content_;
  static const ::std::string _default_raw_content_;
  ::std::string* raw_content_md5_;
  static const ::std::string _default_raw_content_md5_;
  ::google::protobuf::RepeatedPtrField< ::QCrawlerUrl > raw_sub_links_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* content_;
  static const ::std::string _default_content_;
  friend void  protobuf_AddDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_AssignDesc_qcrawler_5frecord_2eproto();
  friend void protobuf_ShutdownFile_qcrawler_5frecord_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QCrawlerRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// QCrawlerUrlMeta

// -------------------------------------------------------------------

// QCrawlerUrl

// required string url = 1;
inline bool QCrawlerUrl::has_url() const {
  return _has_bit(0);
}
inline void QCrawlerUrl::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& QCrawlerUrl::url() const {
  return *url_;
}
inline void QCrawlerUrl::set_url(const ::std::string& value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void QCrawlerUrl::set_url(const char* value) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void QCrawlerUrl::set_url(const char* value, size_t size) {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerUrl::mutable_url() {
  _set_bit(0);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional string normolized_url = 7;
inline bool QCrawlerUrl::has_normolized_url() const {
  return _has_bit(1);
}
inline void QCrawlerUrl::clear_normolized_url() {
  if (normolized_url_ != &_default_normolized_url_) {
    normolized_url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& QCrawlerUrl::normolized_url() const {
  return *normolized_url_;
}
inline void QCrawlerUrl::set_normolized_url(const ::std::string& value) {
  _set_bit(1);
  if (normolized_url_ == &_default_normolized_url_) {
    normolized_url_ = new ::std::string;
  }
  normolized_url_->assign(value);
}
inline void QCrawlerUrl::set_normolized_url(const char* value) {
  _set_bit(1);
  if (normolized_url_ == &_default_normolized_url_) {
    normolized_url_ = new ::std::string;
  }
  normolized_url_->assign(value);
}
inline void QCrawlerUrl::set_normolized_url(const char* value, size_t size) {
  _set_bit(1);
  if (normolized_url_ == &_default_normolized_url_) {
    normolized_url_ = new ::std::string;
  }
  normolized_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerUrl::mutable_normolized_url() {
  _set_bit(1);
  if (normolized_url_ == &_default_normolized_url_) {
    normolized_url_ = new ::std::string;
  }
  return normolized_url_;
}

// optional string url_md5 = 2;
inline bool QCrawlerUrl::has_url_md5() const {
  return _has_bit(2);
}
inline void QCrawlerUrl::clear_url_md5() {
  if (url_md5_ != &_default_url_md5_) {
    url_md5_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& QCrawlerUrl::url_md5() const {
  return *url_md5_;
}
inline void QCrawlerUrl::set_url_md5(const ::std::string& value) {
  _set_bit(2);
  if (url_md5_ == &_default_url_md5_) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(value);
}
inline void QCrawlerUrl::set_url_md5(const char* value) {
  _set_bit(2);
  if (url_md5_ == &_default_url_md5_) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(value);
}
inline void QCrawlerUrl::set_url_md5(const char* value, size_t size) {
  _set_bit(2);
  if (url_md5_ == &_default_url_md5_) {
    url_md5_ = new ::std::string;
  }
  url_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerUrl::mutable_url_md5() {
  _set_bit(2);
  if (url_md5_ == &_default_url_md5_) {
    url_md5_ = new ::std::string;
  }
  return url_md5_;
}

// optional string anchor = 3;
inline bool QCrawlerUrl::has_anchor() const {
  return _has_bit(3);
}
inline void QCrawlerUrl::clear_anchor() {
  if (anchor_ != &_default_anchor_) {
    anchor_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& QCrawlerUrl::anchor() const {
  return *anchor_;
}
inline void QCrawlerUrl::set_anchor(const ::std::string& value) {
  _set_bit(3);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void QCrawlerUrl::set_anchor(const char* value) {
  _set_bit(3);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(value);
}
inline void QCrawlerUrl::set_anchor(const char* value, size_t size) {
  _set_bit(3);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  anchor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerUrl::mutable_anchor() {
  _set_bit(3);
  if (anchor_ == &_default_anchor_) {
    anchor_ = new ::std::string;
  }
  return anchor_;
}

// required int32 crawl_level = 4;
inline bool QCrawlerUrl::has_crawl_level() const {
  return _has_bit(4);
}
inline void QCrawlerUrl::clear_crawl_level() {
  crawl_level_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 QCrawlerUrl::crawl_level() const {
  return crawl_level_;
}
inline void QCrawlerUrl::set_crawl_level(::google::protobuf::int32 value) {
  _set_bit(4);
  crawl_level_ = value;
}

// optional .QCrawlerUrl.CrawlType crawl_type = 5 [default = HOST_RESTRICTED];
inline bool QCrawlerUrl::has_crawl_type() const {
  return _has_bit(5);
}
inline void QCrawlerUrl::clear_crawl_type() {
  crawl_type_ = 0;
  _clear_bit(5);
}
inline ::QCrawlerUrl_CrawlType QCrawlerUrl::crawl_type() const {
  return static_cast< ::QCrawlerUrl_CrawlType >(crawl_type_);
}
inline void QCrawlerUrl::set_crawl_type(::QCrawlerUrl_CrawlType value) {
  GOOGLE_DCHECK(::QCrawlerUrl_CrawlType_IsValid(value));
  _set_bit(5);
  crawl_type_ = value;
}

// optional .QCrawlerUrlMeta mate_data = 6;
inline bool QCrawlerUrl::has_mate_data() const {
  return _has_bit(6);
}
inline void QCrawlerUrl::clear_mate_data() {
  if (mate_data_ != NULL) mate_data_->::QCrawlerUrlMeta::Clear();
  _clear_bit(6);
}
inline const ::QCrawlerUrlMeta& QCrawlerUrl::mate_data() const {
  return mate_data_ != NULL ? *mate_data_ : *default_instance_->mate_data_;
}
inline ::QCrawlerUrlMeta* QCrawlerUrl::mutable_mate_data() {
  _set_bit(6);
  if (mate_data_ == NULL) mate_data_ = new ::QCrawlerUrlMeta;
  return mate_data_;
}

// -------------------------------------------------------------------

// QCrawlerRecord

// required .QCrawlerUrl crawl_url = 1;
inline bool QCrawlerRecord::has_crawl_url() const {
  return _has_bit(0);
}
inline void QCrawlerRecord::clear_crawl_url() {
  if (crawl_url_ != NULL) crawl_url_->::QCrawlerUrl::Clear();
  _clear_bit(0);
}
inline const ::QCrawlerUrl& QCrawlerRecord::crawl_url() const {
  return crawl_url_ != NULL ? *crawl_url_ : *default_instance_->crawl_url_;
}
inline ::QCrawlerUrl* QCrawlerRecord::mutable_crawl_url() {
  _set_bit(0);
  if (crawl_url_ == NULL) crawl_url_ = new ::QCrawlerUrl;
  return crawl_url_;
}

// optional string raw_html = 8;
inline bool QCrawlerRecord::has_raw_html() const {
  return _has_bit(1);
}
inline void QCrawlerRecord::clear_raw_html() {
  if (raw_html_ != &_default_raw_html_) {
    raw_html_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& QCrawlerRecord::raw_html() const {
  return *raw_html_;
}
inline void QCrawlerRecord::set_raw_html(const ::std::string& value) {
  _set_bit(1);
  if (raw_html_ == &_default_raw_html_) {
    raw_html_ = new ::std::string;
  }
  raw_html_->assign(value);
}
inline void QCrawlerRecord::set_raw_html(const char* value) {
  _set_bit(1);
  if (raw_html_ == &_default_raw_html_) {
    raw_html_ = new ::std::string;
  }
  raw_html_->assign(value);
}
inline void QCrawlerRecord::set_raw_html(const char* value, size_t size) {
  _set_bit(1);
  if (raw_html_ == &_default_raw_html_) {
    raw_html_ = new ::std::string;
  }
  raw_html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_raw_html() {
  _set_bit(1);
  if (raw_html_ == &_default_raw_html_) {
    raw_html_ = new ::std::string;
  }
  return raw_html_;
}

// optional string raw_title = 2;
inline bool QCrawlerRecord::has_raw_title() const {
  return _has_bit(2);
}
inline void QCrawlerRecord::clear_raw_title() {
  if (raw_title_ != &_default_raw_title_) {
    raw_title_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& QCrawlerRecord::raw_title() const {
  return *raw_title_;
}
inline void QCrawlerRecord::set_raw_title(const ::std::string& value) {
  _set_bit(2);
  if (raw_title_ == &_default_raw_title_) {
    raw_title_ = new ::std::string;
  }
  raw_title_->assign(value);
}
inline void QCrawlerRecord::set_raw_title(const char* value) {
  _set_bit(2);
  if (raw_title_ == &_default_raw_title_) {
    raw_title_ = new ::std::string;
  }
  raw_title_->assign(value);
}
inline void QCrawlerRecord::set_raw_title(const char* value, size_t size) {
  _set_bit(2);
  if (raw_title_ == &_default_raw_title_) {
    raw_title_ = new ::std::string;
  }
  raw_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_raw_title() {
  _set_bit(2);
  if (raw_title_ == &_default_raw_title_) {
    raw_title_ = new ::std::string;
  }
  return raw_title_;
}

// optional string raw_content = 3;
inline bool QCrawlerRecord::has_raw_content() const {
  return _has_bit(3);
}
inline void QCrawlerRecord::clear_raw_content() {
  if (raw_content_ != &_default_raw_content_) {
    raw_content_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& QCrawlerRecord::raw_content() const {
  return *raw_content_;
}
inline void QCrawlerRecord::set_raw_content(const ::std::string& value) {
  _set_bit(3);
  if (raw_content_ == &_default_raw_content_) {
    raw_content_ = new ::std::string;
  }
  raw_content_->assign(value);
}
inline void QCrawlerRecord::set_raw_content(const char* value) {
  _set_bit(3);
  if (raw_content_ == &_default_raw_content_) {
    raw_content_ = new ::std::string;
  }
  raw_content_->assign(value);
}
inline void QCrawlerRecord::set_raw_content(const char* value, size_t size) {
  _set_bit(3);
  if (raw_content_ == &_default_raw_content_) {
    raw_content_ = new ::std::string;
  }
  raw_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_raw_content() {
  _set_bit(3);
  if (raw_content_ == &_default_raw_content_) {
    raw_content_ = new ::std::string;
  }
  return raw_content_;
}

// optional string raw_content_md5 = 4;
inline bool QCrawlerRecord::has_raw_content_md5() const {
  return _has_bit(4);
}
inline void QCrawlerRecord::clear_raw_content_md5() {
  if (raw_content_md5_ != &_default_raw_content_md5_) {
    raw_content_md5_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& QCrawlerRecord::raw_content_md5() const {
  return *raw_content_md5_;
}
inline void QCrawlerRecord::set_raw_content_md5(const ::std::string& value) {
  _set_bit(4);
  if (raw_content_md5_ == &_default_raw_content_md5_) {
    raw_content_md5_ = new ::std::string;
  }
  raw_content_md5_->assign(value);
}
inline void QCrawlerRecord::set_raw_content_md5(const char* value) {
  _set_bit(4);
  if (raw_content_md5_ == &_default_raw_content_md5_) {
    raw_content_md5_ = new ::std::string;
  }
  raw_content_md5_->assign(value);
}
inline void QCrawlerRecord::set_raw_content_md5(const char* value, size_t size) {
  _set_bit(4);
  if (raw_content_md5_ == &_default_raw_content_md5_) {
    raw_content_md5_ = new ::std::string;
  }
  raw_content_md5_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_raw_content_md5() {
  _set_bit(4);
  if (raw_content_md5_ == &_default_raw_content_md5_) {
    raw_content_md5_ = new ::std::string;
  }
  return raw_content_md5_;
}

// repeated .QCrawlerUrl raw_sub_links = 5;
inline int QCrawlerRecord::raw_sub_links_size() const {
  return raw_sub_links_.size();
}
inline void QCrawlerRecord::clear_raw_sub_links() {
  raw_sub_links_.Clear();
}
inline const ::QCrawlerUrl& QCrawlerRecord::raw_sub_links(int index) const {
  return raw_sub_links_.Get(index);
}
inline ::QCrawlerUrl* QCrawlerRecord::mutable_raw_sub_links(int index) {
  return raw_sub_links_.Mutable(index);
}
inline ::QCrawlerUrl* QCrawlerRecord::add_raw_sub_links() {
  return raw_sub_links_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::QCrawlerUrl >&
QCrawlerRecord::raw_sub_links() const {
  return raw_sub_links_;
}
inline ::google::protobuf::RepeatedPtrField< ::QCrawlerUrl >*
QCrawlerRecord::mutable_raw_sub_links() {
  return &raw_sub_links_;
}

// optional string title = 6;
inline bool QCrawlerRecord::has_title() const {
  return _has_bit(6);
}
inline void QCrawlerRecord::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& QCrawlerRecord::title() const {
  return *title_;
}
inline void QCrawlerRecord::set_title(const ::std::string& value) {
  _set_bit(6);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void QCrawlerRecord::set_title(const char* value) {
  _set_bit(6);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void QCrawlerRecord::set_title(const char* value, size_t size) {
  _set_bit(6);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_title() {
  _set_bit(6);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional string content = 7;
inline bool QCrawlerRecord::has_content() const {
  return _has_bit(7);
}
inline void QCrawlerRecord::clear_content() {
  if (content_ != &_default_content_) {
    content_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& QCrawlerRecord::content() const {
  return *content_;
}
inline void QCrawlerRecord::set_content(const ::std::string& value) {
  _set_bit(7);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void QCrawlerRecord::set_content(const char* value) {
  _set_bit(7);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void QCrawlerRecord::set_content(const char* value, size_t size) {
  _set_bit(7);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QCrawlerRecord::mutable_content() {
  _set_bit(7);
  if (content_ == &_default_content_) {
    content_ = new ::std::string;
  }
  return content_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::QCrawlerUrl_CrawlType>() {
  return ::QCrawlerUrl_CrawlType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_qcrawler_5frecord_2eproto__INCLUDED
