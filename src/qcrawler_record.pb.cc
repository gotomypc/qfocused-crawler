// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "qcrawler_record.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* QCrawlerUrlMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QCrawlerUrlMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* QCrawlerUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QCrawlerUrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QCrawlerUrl_CrawlType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QCrawlerUrl_LinkType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QCrawlerUrl_UrlStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QCrawlerRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QCrawlerRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_qcrawler_5frecord_2eproto() {
  protobuf_AddDesc_qcrawler_5frecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "qcrawler_record.proto");
  GOOGLE_CHECK(file != NULL);
  QCrawlerUrlMeta_descriptor_ = file->message_type(0);
  static const int QCrawlerUrlMeta_offsets_[1] = {
  };
  QCrawlerUrlMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QCrawlerUrlMeta_descriptor_,
      QCrawlerUrlMeta::default_instance_,
      QCrawlerUrlMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrlMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrlMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QCrawlerUrlMeta));
  QCrawlerUrl_descriptor_ = file->message_type(1);
  static const int QCrawlerUrl_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, url_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, url_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, anchor_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, failed_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, crawl_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, crawl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, mate_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, link_type_),
  };
  QCrawlerUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QCrawlerUrl_descriptor_,
      QCrawlerUrl::default_instance_,
      QCrawlerUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QCrawlerUrl));
  QCrawlerUrl_CrawlType_descriptor_ = QCrawlerUrl_descriptor_->enum_type(0);
  QCrawlerUrl_LinkType_descriptor_ = QCrawlerUrl_descriptor_->enum_type(1);
  QCrawlerUrl_UrlStatus_descriptor_ = QCrawlerUrl_descriptor_->enum_type(2);
  QCrawlerRecord_descriptor_ = file->message_type(2);
  static const int QCrawlerRecord_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, crawl_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, raw_html_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, raw_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, raw_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, raw_content_md5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, raw_sub_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, focused_links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, download_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, loading_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, last_modified_),
  };
  QCrawlerRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QCrawlerRecord_descriptor_,
      QCrawlerRecord::default_instance_,
      QCrawlerRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QCrawlerRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QCrawlerRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_qcrawler_5frecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QCrawlerUrlMeta_descriptor_, &QCrawlerUrlMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QCrawlerUrl_descriptor_, &QCrawlerUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QCrawlerRecord_descriptor_, &QCrawlerRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_qcrawler_5frecord_2eproto() {
  delete QCrawlerUrlMeta::default_instance_;
  delete QCrawlerUrlMeta_reflection_;
  delete QCrawlerUrl::default_instance_;
  delete QCrawlerUrl_reflection_;
  delete QCrawlerRecord::default_instance_;
  delete QCrawlerRecord_reflection_;
}

void protobuf_AddDesc_qcrawler_5frecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025qcrawler_record.proto\"\021\n\017QCrawlerUrlMe"
    "ta\"\200\005\n\013QCrawlerUrl\022\013\n\003url\030\001 \002(\t\0227\n\nurl_s"
    "tatus\030\n \001(\0162\026.QCrawlerUrl.UrlStatus:\013NOT"
    "_CRAWLED\022\014\n\004host\030\002 \001(\t\022\017\n\007url_md5\030\003 \001(\t\022"
    "\023\n\013anchor_text\030\004 \001(\t\022\024\n\014failed_times\030\005 \001"
    "(\005\022\023\n\013crawl_level\030\006 \002(\005\022;\n\ncrawl_type\030\007 "
    "\001(\0162\026.QCrawlerUrl.CrawlType:\017HOST_RESTRI"
    "CTED\022#\n\tmate_data\030\010 \001(\0132\020.QCrawlerUrlMet"
    "a\022(\n\tlink_type\030\t \001(\0162\025.QCrawlerUrl.LinkT"
    "ype\",\n\tCrawlType\022\023\n\017HOST_RESTRICTED\020\000\022\n\n"
    "\006UPDATE\020\001\"&\n\010LinkType\022\010\n\004HTML\020\000\022\007\n\003IMG\020\001"
    "\022\007\n\003PDF\020\002\"\351\001\n\tUrlStatus\022\026\n\tNOT_EXIST\020\234\377\377"
    "\377\377\377\377\377\377\001\022\017\n\013NOT_CRAWLED\020\000\022\016\n\nCRAWLED_OK\020\001"
    "\022\022\n\016NOT_NEED_CRAWL\020\n\022\033\n\016FAILED_CRAWL_1\020\377"
    "\377\377\377\377\377\377\377\377\001\022\033\n\016FAILED_CRAWL_2\020\376\377\377\377\377\377\377\377\377\001\022\033"
    "\n\016FAILED_CRAWL_3\020\375\377\377\377\377\377\377\377\377\001\022\033\n\016FAILED_CR"
    "AWL_4\020\374\377\377\377\377\377\377\377\377\001\022\033\n\016FAILED_CRAWL_5\020\373\377\377\377\377"
    "\377\377\377\377\001\"\262\002\n\016QCrawlerRecord\022\037\n\tcrawl_url\030\001 "
    "\002(\0132\014.QCrawlerUrl\022\020\n\010raw_html\030\010 \001(\t\022\021\n\tr"
    "aw_title\030\002 \001(\t\022\023\n\013raw_content\030\003 \001(\t\022\027\n\017r"
    "aw_content_md5\030\004 \001(\t\022#\n\rraw_sub_links\030\005 "
    "\003(\0132\014.QCrawlerUrl\022\r\n\005title\030\006 \001(\t\022\017\n\007cont"
    "ent\030\007 \001(\t\022#\n\rfocused_links\030\t \003(\0132\014.QCraw"
    "lerUrl\022\025\n\rdownload_time\030\n \001(\005\022\024\n\014loading"
    "_time\030\013 \001(\005\022\025\n\rlast_modified\030\014 \001(\005", 994);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "qcrawler_record.proto", &protobuf_RegisterTypes);
  QCrawlerUrlMeta::default_instance_ = new QCrawlerUrlMeta();
  QCrawlerUrl::default_instance_ = new QCrawlerUrl();
  QCrawlerRecord::default_instance_ = new QCrawlerRecord();
  QCrawlerUrlMeta::default_instance_->InitAsDefaultInstance();
  QCrawlerUrl::default_instance_->InitAsDefaultInstance();
  QCrawlerRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_qcrawler_5frecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_qcrawler_5frecord_2eproto {
  StaticDescriptorInitializer_qcrawler_5frecord_2eproto() {
    protobuf_AddDesc_qcrawler_5frecord_2eproto();
  }
} static_descriptor_initializer_qcrawler_5frecord_2eproto_;


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QCrawlerUrlMeta::QCrawlerUrlMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QCrawlerUrlMeta::InitAsDefaultInstance() {
}

QCrawlerUrlMeta::QCrawlerUrlMeta(const QCrawlerUrlMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QCrawlerUrlMeta::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QCrawlerUrlMeta::~QCrawlerUrlMeta() {
  SharedDtor();
}

void QCrawlerUrlMeta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QCrawlerUrlMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QCrawlerUrlMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerUrlMeta_descriptor_;
}

const QCrawlerUrlMeta& QCrawlerUrlMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qcrawler_5frecord_2eproto();  return *default_instance_;
}

QCrawlerUrlMeta* QCrawlerUrlMeta::default_instance_ = NULL;

QCrawlerUrlMeta* QCrawlerUrlMeta::New() const {
  return new QCrawlerUrlMeta;
}

void QCrawlerUrlMeta::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QCrawlerUrlMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QCrawlerUrlMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QCrawlerUrlMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QCrawlerUrlMeta::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QCrawlerUrlMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QCrawlerUrlMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QCrawlerUrlMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QCrawlerUrlMeta::MergeFrom(const QCrawlerUrlMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QCrawlerUrlMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QCrawlerUrlMeta::CopyFrom(const QCrawlerUrlMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QCrawlerUrlMeta::IsInitialized() const {
  
  return true;
}

void QCrawlerUrlMeta::Swap(QCrawlerUrlMeta* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QCrawlerUrlMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QCrawlerUrlMeta_descriptor_;
  metadata.reflection = QCrawlerUrlMeta_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QCrawlerUrl_CrawlType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerUrl_CrawlType_descriptor_;
}
bool QCrawlerUrl_CrawlType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QCrawlerUrl_CrawlType QCrawlerUrl::HOST_RESTRICTED;
const QCrawlerUrl_CrawlType QCrawlerUrl::UPDATE;
const QCrawlerUrl_CrawlType QCrawlerUrl::CrawlType_MIN;
const QCrawlerUrl_CrawlType QCrawlerUrl::CrawlType_MAX;
const int QCrawlerUrl::CrawlType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QCrawlerUrl_LinkType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerUrl_LinkType_descriptor_;
}
bool QCrawlerUrl_LinkType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QCrawlerUrl_LinkType QCrawlerUrl::HTML;
const QCrawlerUrl_LinkType QCrawlerUrl::IMG;
const QCrawlerUrl_LinkType QCrawlerUrl::PDF;
const QCrawlerUrl_LinkType QCrawlerUrl::LinkType_MIN;
const QCrawlerUrl_LinkType QCrawlerUrl::LinkType_MAX;
const int QCrawlerUrl::LinkType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QCrawlerUrl_UrlStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerUrl_UrlStatus_descriptor_;
}
bool QCrawlerUrl_UrlStatus_IsValid(int value) {
  switch(value) {
    case -100:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QCrawlerUrl_UrlStatus QCrawlerUrl::NOT_EXIST;
const QCrawlerUrl_UrlStatus QCrawlerUrl::NOT_CRAWLED;
const QCrawlerUrl_UrlStatus QCrawlerUrl::CRAWLED_OK;
const QCrawlerUrl_UrlStatus QCrawlerUrl::NOT_NEED_CRAWL;
const QCrawlerUrl_UrlStatus QCrawlerUrl::FAILED_CRAWL_1;
const QCrawlerUrl_UrlStatus QCrawlerUrl::FAILED_CRAWL_2;
const QCrawlerUrl_UrlStatus QCrawlerUrl::FAILED_CRAWL_3;
const QCrawlerUrl_UrlStatus QCrawlerUrl::FAILED_CRAWL_4;
const QCrawlerUrl_UrlStatus QCrawlerUrl::FAILED_CRAWL_5;
const QCrawlerUrl_UrlStatus QCrawlerUrl::UrlStatus_MIN;
const QCrawlerUrl_UrlStatus QCrawlerUrl::UrlStatus_MAX;
const int QCrawlerUrl::UrlStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string QCrawlerUrl::_default_url_;
const ::std::string QCrawlerUrl::_default_host_;
const ::std::string QCrawlerUrl::_default_url_md5_;
const ::std::string QCrawlerUrl::_default_anchor_text_;
#ifndef _MSC_VER
const int QCrawlerUrl::kUrlFieldNumber;
const int QCrawlerUrl::kUrlStatusFieldNumber;
const int QCrawlerUrl::kHostFieldNumber;
const int QCrawlerUrl::kUrlMd5FieldNumber;
const int QCrawlerUrl::kAnchorTextFieldNumber;
const int QCrawlerUrl::kFailedTimesFieldNumber;
const int QCrawlerUrl::kCrawlLevelFieldNumber;
const int QCrawlerUrl::kCrawlTypeFieldNumber;
const int QCrawlerUrl::kMateDataFieldNumber;
const int QCrawlerUrl::kLinkTypeFieldNumber;
#endif  // !_MSC_VER

QCrawlerUrl::QCrawlerUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QCrawlerUrl::InitAsDefaultInstance() {
  mate_data_ = const_cast< ::QCrawlerUrlMeta*>(&::QCrawlerUrlMeta::default_instance());
}

QCrawlerUrl::QCrawlerUrl(const QCrawlerUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QCrawlerUrl::SharedCtor() {
  _cached_size_ = 0;
  url_ = const_cast< ::std::string*>(&_default_url_);
  url_status_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  url_md5_ = const_cast< ::std::string*>(&_default_url_md5_);
  anchor_text_ = const_cast< ::std::string*>(&_default_anchor_text_);
  failed_times_ = 0;
  crawl_level_ = 0;
  crawl_type_ = 0;
  mate_data_ = NULL;
  link_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QCrawlerUrl::~QCrawlerUrl() {
  SharedDtor();
}

void QCrawlerUrl::SharedDtor() {
  if (url_ != &_default_url_) {
    delete url_;
  }
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (url_md5_ != &_default_url_md5_) {
    delete url_md5_;
  }
  if (anchor_text_ != &_default_anchor_text_) {
    delete anchor_text_;
  }
  if (this != default_instance_) {
    delete mate_data_;
  }
}

void QCrawlerUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QCrawlerUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerUrl_descriptor_;
}

const QCrawlerUrl& QCrawlerUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qcrawler_5frecord_2eproto();  return *default_instance_;
}

QCrawlerUrl* QCrawlerUrl::default_instance_ = NULL;

QCrawlerUrl* QCrawlerUrl::New() const {
  return new QCrawlerUrl;
}

void QCrawlerUrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (url_ != &_default_url_) {
        url_->clear();
      }
    }
    url_status_ = 0;
    if (_has_bit(2)) {
      if (host_ != &_default_host_) {
        host_->clear();
      }
    }
    if (_has_bit(3)) {
      if (url_md5_ != &_default_url_md5_) {
        url_md5_->clear();
      }
    }
    if (_has_bit(4)) {
      if (anchor_text_ != &_default_anchor_text_) {
        anchor_text_->clear();
      }
    }
    failed_times_ = 0;
    crawl_level_ = 0;
    crawl_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (mate_data_ != NULL) mate_data_->::QCrawlerUrlMeta::Clear();
    }
    link_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QCrawlerUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_host;
        break;
      }
      
      // optional string host = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url_md5;
        break;
      }
      
      // optional string url_md5 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_md5().data(), this->url_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_anchor_text;
        break;
      }
      
      // optional string anchor_text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchor_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_anchor_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->anchor_text().data(), this->anchor_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failed_times;
        break;
      }
      
      // optional int32 failed_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failed_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failed_times_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crawl_level;
        break;
      }
      
      // required int32 crawl_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crawl_level_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crawl_type;
        break;
      }
      
      // optional .QCrawlerUrl.CrawlType crawl_type = 7 [default = HOST_RESTRICTED];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crawl_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QCrawlerUrl_CrawlType_IsValid(value)) {
            set_crawl_type(static_cast< ::QCrawlerUrl_CrawlType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_mate_data;
        break;
      }
      
      // optional .QCrawlerUrlMeta mate_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mate_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mate_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_link_type;
        break;
      }
      
      // optional .QCrawlerUrl.LinkType link_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QCrawlerUrl_LinkType_IsValid(value)) {
            set_link_type(static_cast< ::QCrawlerUrl_LinkType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_url_status;
        break;
      }
      
      // optional .QCrawlerUrl.UrlStatus url_status = 10 [default = NOT_CRAWLED];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_url_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::QCrawlerUrl_UrlStatus_IsValid(value)) {
            set_url_status(static_cast< ::QCrawlerUrl_UrlStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QCrawlerUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->url(), output);
  }
  
  // optional string host = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->host(), output);
  }
  
  // optional string url_md5 = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_md5().data(), this->url_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url_md5(), output);
  }
  
  // optional string anchor_text = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anchor_text().data(), this->anchor_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->anchor_text(), output);
  }
  
  // optional int32 failed_times = 5;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->failed_times(), output);
  }
  
  // required int32 crawl_level = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->crawl_level(), output);
  }
  
  // optional .QCrawlerUrl.CrawlType crawl_type = 7 [default = HOST_RESTRICTED];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->crawl_type(), output);
  }
  
  // optional .QCrawlerUrlMeta mate_data = 8;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->mate_data(), output);
  }
  
  // optional .QCrawlerUrl.LinkType link_type = 9;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->link_type(), output);
  }
  
  // optional .QCrawlerUrl.UrlStatus url_status = 10 [default = NOT_CRAWLED];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->url_status(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QCrawlerUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->url(), target);
  }
  
  // optional string host = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host(), target);
  }
  
  // optional string url_md5 = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_md5().data(), this->url_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url_md5(), target);
  }
  
  // optional string anchor_text = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->anchor_text().data(), this->anchor_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->anchor_text(), target);
  }
  
  // optional int32 failed_times = 5;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->failed_times(), target);
  }
  
  // required int32 crawl_level = 6;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->crawl_level(), target);
  }
  
  // optional .QCrawlerUrl.CrawlType crawl_type = 7 [default = HOST_RESTRICTED];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->crawl_type(), target);
  }
  
  // optional .QCrawlerUrlMeta mate_data = 8;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->mate_data(), target);
  }
  
  // optional .QCrawlerUrl.LinkType link_type = 9;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->link_type(), target);
  }
  
  // optional .QCrawlerUrl.UrlStatus url_status = 10 [default = NOT_CRAWLED];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->url_status(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QCrawlerUrl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string url = 1;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }
    
    // optional .QCrawlerUrl.UrlStatus url_status = 10 [default = NOT_CRAWLED];
    if (has_url_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->url_status());
    }
    
    // optional string host = 2;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional string url_md5 = 3;
    if (has_url_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_md5());
    }
    
    // optional string anchor_text = 4;
    if (has_anchor_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->anchor_text());
    }
    
    // optional int32 failed_times = 5;
    if (has_failed_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failed_times());
    }
    
    // required int32 crawl_level = 6;
    if (has_crawl_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crawl_level());
    }
    
    // optional .QCrawlerUrl.CrawlType crawl_type = 7 [default = HOST_RESTRICTED];
    if (has_crawl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->crawl_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .QCrawlerUrlMeta mate_data = 8;
    if (has_mate_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mate_data());
    }
    
    // optional .QCrawlerUrl.LinkType link_type = 9;
    if (has_link_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->link_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QCrawlerUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QCrawlerUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QCrawlerUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QCrawlerUrl::MergeFrom(const QCrawlerUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_url(from.url());
    }
    if (from._has_bit(1)) {
      set_url_status(from.url_status());
    }
    if (from._has_bit(2)) {
      set_host(from.host());
    }
    if (from._has_bit(3)) {
      set_url_md5(from.url_md5());
    }
    if (from._has_bit(4)) {
      set_anchor_text(from.anchor_text());
    }
    if (from._has_bit(5)) {
      set_failed_times(from.failed_times());
    }
    if (from._has_bit(6)) {
      set_crawl_level(from.crawl_level());
    }
    if (from._has_bit(7)) {
      set_crawl_type(from.crawl_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_mate_data()->::QCrawlerUrlMeta::MergeFrom(from.mate_data());
    }
    if (from._has_bit(9)) {
      set_link_type(from.link_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QCrawlerUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QCrawlerUrl::CopyFrom(const QCrawlerUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QCrawlerUrl::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;
  
  return true;
}

void QCrawlerUrl::Swap(QCrawlerUrl* other) {
  if (other != this) {
    std::swap(url_, other->url_);
    std::swap(url_status_, other->url_status_);
    std::swap(host_, other->host_);
    std::swap(url_md5_, other->url_md5_);
    std::swap(anchor_text_, other->anchor_text_);
    std::swap(failed_times_, other->failed_times_);
    std::swap(crawl_level_, other->crawl_level_);
    std::swap(crawl_type_, other->crawl_type_);
    std::swap(mate_data_, other->mate_data_);
    std::swap(link_type_, other->link_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QCrawlerUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QCrawlerUrl_descriptor_;
  metadata.reflection = QCrawlerUrl_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string QCrawlerRecord::_default_raw_html_;
const ::std::string QCrawlerRecord::_default_raw_title_;
const ::std::string QCrawlerRecord::_default_raw_content_;
const ::std::string QCrawlerRecord::_default_raw_content_md5_;
const ::std::string QCrawlerRecord::_default_title_;
const ::std::string QCrawlerRecord::_default_content_;
#ifndef _MSC_VER
const int QCrawlerRecord::kCrawlUrlFieldNumber;
const int QCrawlerRecord::kRawHtmlFieldNumber;
const int QCrawlerRecord::kRawTitleFieldNumber;
const int QCrawlerRecord::kRawContentFieldNumber;
const int QCrawlerRecord::kRawContentMd5FieldNumber;
const int QCrawlerRecord::kRawSubLinksFieldNumber;
const int QCrawlerRecord::kTitleFieldNumber;
const int QCrawlerRecord::kContentFieldNumber;
const int QCrawlerRecord::kFocusedLinksFieldNumber;
const int QCrawlerRecord::kDownloadTimeFieldNumber;
const int QCrawlerRecord::kLoadingTimeFieldNumber;
const int QCrawlerRecord::kLastModifiedFieldNumber;
#endif  // !_MSC_VER

QCrawlerRecord::QCrawlerRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QCrawlerRecord::InitAsDefaultInstance() {
  crawl_url_ = const_cast< ::QCrawlerUrl*>(&::QCrawlerUrl::default_instance());
}

QCrawlerRecord::QCrawlerRecord(const QCrawlerRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QCrawlerRecord::SharedCtor() {
  _cached_size_ = 0;
  crawl_url_ = NULL;
  raw_html_ = const_cast< ::std::string*>(&_default_raw_html_);
  raw_title_ = const_cast< ::std::string*>(&_default_raw_title_);
  raw_content_ = const_cast< ::std::string*>(&_default_raw_content_);
  raw_content_md5_ = const_cast< ::std::string*>(&_default_raw_content_md5_);
  title_ = const_cast< ::std::string*>(&_default_title_);
  content_ = const_cast< ::std::string*>(&_default_content_);
  download_time_ = 0;
  loading_time_ = 0;
  last_modified_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QCrawlerRecord::~QCrawlerRecord() {
  SharedDtor();
}

void QCrawlerRecord::SharedDtor() {
  if (raw_html_ != &_default_raw_html_) {
    delete raw_html_;
  }
  if (raw_title_ != &_default_raw_title_) {
    delete raw_title_;
  }
  if (raw_content_ != &_default_raw_content_) {
    delete raw_content_;
  }
  if (raw_content_md5_ != &_default_raw_content_md5_) {
    delete raw_content_md5_;
  }
  if (title_ != &_default_title_) {
    delete title_;
  }
  if (content_ != &_default_content_) {
    delete content_;
  }
  if (this != default_instance_) {
    delete crawl_url_;
  }
}

void QCrawlerRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QCrawlerRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QCrawlerRecord_descriptor_;
}

const QCrawlerRecord& QCrawlerRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_qcrawler_5frecord_2eproto();  return *default_instance_;
}

QCrawlerRecord* QCrawlerRecord::default_instance_ = NULL;

QCrawlerRecord* QCrawlerRecord::New() const {
  return new QCrawlerRecord;
}

void QCrawlerRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (crawl_url_ != NULL) crawl_url_->::QCrawlerUrl::Clear();
    }
    if (_has_bit(1)) {
      if (raw_html_ != &_default_raw_html_) {
        raw_html_->clear();
      }
    }
    if (_has_bit(2)) {
      if (raw_title_ != &_default_raw_title_) {
        raw_title_->clear();
      }
    }
    if (_has_bit(3)) {
      if (raw_content_ != &_default_raw_content_) {
        raw_content_->clear();
      }
    }
    if (_has_bit(4)) {
      if (raw_content_md5_ != &_default_raw_content_md5_) {
        raw_content_md5_->clear();
      }
    }
    if (_has_bit(6)) {
      if (title_ != &_default_title_) {
        title_->clear();
      }
    }
    if (_has_bit(7)) {
      if (content_ != &_default_content_) {
        content_->clear();
      }
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    download_time_ = 0;
    loading_time_ = 0;
    last_modified_ = 0;
  }
  raw_sub_links_.Clear();
  focused_links_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QCrawlerRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .QCrawlerUrl crawl_url = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crawl_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_title;
        break;
      }
      
      // optional string raw_title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_title().data(), this->raw_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_raw_content;
        break;
      }
      
      // optional string raw_content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_content().data(), this->raw_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_raw_content_md5;
        break;
      }
      
      // optional string raw_content_md5 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_content_md5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_content_md5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_content_md5().data(), this->raw_content_md5().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raw_sub_links;
        break;
      }
      
      // repeated .QCrawlerUrl raw_sub_links = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_sub_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_raw_sub_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_raw_sub_links;
        if (input->ExpectTag(50)) goto parse_title;
        break;
      }
      
      // optional string title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }
      
      // optional string content = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_raw_html;
        break;
      }
      
      // optional string raw_html = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_html:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_html()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_html().data(), this->raw_html().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_focused_links;
        break;
      }
      
      // repeated .QCrawlerUrl focused_links = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_focused_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_focused_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_focused_links;
        if (input->ExpectTag(80)) goto parse_download_time;
        break;
      }
      
      // optional int32 download_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_time_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_loading_time;
        break;
      }
      
      // optional int32 loading_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loading_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loading_time_)));
          _set_bit(10);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_last_modified;
        break;
      }
      
      // optional int32 last_modified = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_modified:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &last_modified_)));
          _set_bit(11);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QCrawlerRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .QCrawlerUrl crawl_url = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->crawl_url(), output);
  }
  
  // optional string raw_title = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_title().data(), this->raw_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_title(), output);
  }
  
  // optional string raw_content = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->raw_content(), output);
  }
  
  // optional string raw_content_md5 = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content_md5().data(), this->raw_content_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->raw_content_md5(), output);
  }
  
  // repeated .QCrawlerUrl raw_sub_links = 5;
  for (int i = 0; i < this->raw_sub_links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->raw_sub_links(i), output);
  }
  
  // optional string title = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->title(), output);
  }
  
  // optional string content = 7;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->content(), output);
  }
  
  // optional string raw_html = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_html().data(), this->raw_html().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->raw_html(), output);
  }
  
  // repeated .QCrawlerUrl focused_links = 9;
  for (int i = 0; i < this->focused_links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->focused_links(i), output);
  }
  
  // optional int32 download_time = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->download_time(), output);
  }
  
  // optional int32 loading_time = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->loading_time(), output);
  }
  
  // optional int32 last_modified = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->last_modified(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QCrawlerRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .QCrawlerUrl crawl_url = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->crawl_url(), target);
  }
  
  // optional string raw_title = 2;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_title().data(), this->raw_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_title(), target);
  }
  
  // optional string raw_content = 3;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->raw_content(), target);
  }
  
  // optional string raw_content_md5 = 4;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content_md5().data(), this->raw_content_md5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->raw_content_md5(), target);
  }
  
  // repeated .QCrawlerUrl raw_sub_links = 5;
  for (int i = 0; i < this->raw_sub_links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->raw_sub_links(i), target);
  }
  
  // optional string title = 6;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->title(), target);
  }
  
  // optional string content = 7;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->content(), target);
  }
  
  // optional string raw_html = 8;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_html().data(), this->raw_html().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->raw_html(), target);
  }
  
  // repeated .QCrawlerUrl focused_links = 9;
  for (int i = 0; i < this->focused_links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->focused_links(i), target);
  }
  
  // optional int32 download_time = 10;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->download_time(), target);
  }
  
  // optional int32 loading_time = 11;
  if (_has_bit(10)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->loading_time(), target);
  }
  
  // optional int32 last_modified = 12;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->last_modified(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QCrawlerRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .QCrawlerUrl crawl_url = 1;
    if (has_crawl_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crawl_url());
    }
    
    // optional string raw_html = 8;
    if (has_raw_html()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_html());
    }
    
    // optional string raw_title = 2;
    if (has_raw_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_title());
    }
    
    // optional string raw_content = 3;
    if (has_raw_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_content());
    }
    
    // optional string raw_content_md5 = 4;
    if (has_raw_content_md5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_content_md5());
    }
    
    // optional string title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }
    
    // optional string content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 download_time = 10;
    if (has_download_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_time());
    }
    
    // optional int32 loading_time = 11;
    if (has_loading_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loading_time());
    }
    
    // optional int32 last_modified = 12;
    if (has_last_modified()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->last_modified());
    }
    
  }
  // repeated .QCrawlerUrl raw_sub_links = 5;
  total_size += 1 * this->raw_sub_links_size();
  for (int i = 0; i < this->raw_sub_links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->raw_sub_links(i));
  }
  
  // repeated .QCrawlerUrl focused_links = 9;
  total_size += 1 * this->focused_links_size();
  for (int i = 0; i < this->focused_links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->focused_links(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QCrawlerRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QCrawlerRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QCrawlerRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QCrawlerRecord::MergeFrom(const QCrawlerRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  raw_sub_links_.MergeFrom(from.raw_sub_links_);
  focused_links_.MergeFrom(from.focused_links_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_crawl_url()->::QCrawlerUrl::MergeFrom(from.crawl_url());
    }
    if (from._has_bit(1)) {
      set_raw_html(from.raw_html());
    }
    if (from._has_bit(2)) {
      set_raw_title(from.raw_title());
    }
    if (from._has_bit(3)) {
      set_raw_content(from.raw_content());
    }
    if (from._has_bit(4)) {
      set_raw_content_md5(from.raw_content_md5());
    }
    if (from._has_bit(6)) {
      set_title(from.title());
    }
    if (from._has_bit(7)) {
      set_content(from.content());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from._has_bit(9)) {
      set_download_time(from.download_time());
    }
    if (from._has_bit(10)) {
      set_loading_time(from.loading_time());
    }
    if (from._has_bit(11)) {
      set_last_modified(from.last_modified());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QCrawlerRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QCrawlerRecord::CopyFrom(const QCrawlerRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QCrawlerRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_crawl_url()) {
    if (!this->crawl_url().IsInitialized()) return false;
  }
  for (int i = 0; i < raw_sub_links_size(); i++) {
    if (!this->raw_sub_links(i).IsInitialized()) return false;
  }
  for (int i = 0; i < focused_links_size(); i++) {
    if (!this->focused_links(i).IsInitialized()) return false;
  }
  return true;
}

void QCrawlerRecord::Swap(QCrawlerRecord* other) {
  if (other != this) {
    std::swap(crawl_url_, other->crawl_url_);
    std::swap(raw_html_, other->raw_html_);
    std::swap(raw_title_, other->raw_title_);
    std::swap(raw_content_, other->raw_content_);
    std::swap(raw_content_md5_, other->raw_content_md5_);
    raw_sub_links_.Swap(&other->raw_sub_links_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    focused_links_.Swap(&other->focused_links_);
    std::swap(download_time_, other->download_time_);
    std::swap(loading_time_, other->loading_time_);
    std::swap(last_modified_, other->last_modified_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QCrawlerRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QCrawlerRecord_descriptor_;
  metadata.reflection = QCrawlerRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
